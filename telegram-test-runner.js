const { execSync } = require('child_process');

function executeCommand(command, description) {
  console.log(`\nüîß ${description}`);
  console.log(`üìù –ö–æ–º–∞–Ω–¥–∞: ${command}`);
  console.log('=' * 50);
  
  try {
    const output = execSync(command, { 
      encoding: 'utf8', 
      stdio: 'pipe',
      timeout: 30000
    });
    console.log(output);
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n');
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`);
    if (error.stdout) {
      console.log('üì§ STDOUT:');
      console.log(error.stdout);
    }
    if (error.stderr) {
      console.error('üì§ STDERR:');
      console.error(error.stderr);
    }
    console.log('‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π\n');
    return false;
  }
}

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –±–æ—Ç–∞');
console.log('üìÖ –í—Ä–µ–º—è:', new Date().toLocaleString('ru-RU'));

// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
const attempts = [
  ['bun simple-telegram-test.js', '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å Bun runtime'],
  ['node simple-telegram-test.js', '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å Node.js'],
  ['node test-telegram.js', '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å Node.js']
];

let success = false;
for (const [command, description] of attempts) {
  if (executeCommand(command, description)) {
    success = true;
    break;
  }
}

if (!success) {
  console.log('\n‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å');
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ Node.js –∏–ª–∏ Bun –≤ —Å–∏—Å—Ç–µ–º–µ');
} else {
  console.log('\n‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω');
}

console.log('\nüèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞');