const { spawn, execSync } = require('child_process');
const fs = require('fs');

async function runCommand(command, args = [], description) {
    console.log(`\nüîß ${description}`);
    console.log(`üìù –ö–æ–º–∞–Ω–¥–∞: ${command} ${args.join(' ')}`);
    console.log('='.repeat(60));
    
    return new Promise((resolve) => {
        const process = spawn(command, args, {
            stdio: 'inherit',
            shell: true
        });
        
        process.on('close', (code) => {
            if (code === 0) {
                console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
                resolve(true);
            } else {
                console.log(`‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º: ${code}`);
                resolve(false);
            }
        });
        
        process.on('error', (error) => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${error.message}`);
            resolve(false);
        });
    });
}

async function main() {
    console.log('üöÄ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM –ë–û–¢–ê');
    console.log('===================================');
    console.log(`üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${new Date().toLocaleString('ru-RU')}`);
    
    const tests = [
        ['node', ['direct-test.js'], '–ü—Ä—è–º–æ–π HTTP —Ç–µ—Å—Ç —Å Node.js'],
        ['python3', ['test-telegram.py'], 'Python —Ç–µ—Å—Ç'],
        ['node', ['execute-python-test.js'], '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Python wrapper']
    ];
    
    let anySuccess = false;
    
    for (const [command, args, description] of tests) {
        const success = await runCommand(command, args, description);
        if (success) {
            anySuccess = true;
            console.log(`\nüéØ –£—Å–ø–µ—à–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞–π–¥–µ–Ω: ${description}`);
            break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        }
    }
    
    console.log('\n' + '='.repeat(60));
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢');
    console.log('='.repeat(60));
    
    if (anySuccess) {
        console.log('‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û');
        console.log('üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram —á–∞—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
    } else {
        console.log('‚ùå –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ò–õ–ò–°–¨ –ù–ï–£–î–ê–ß–ù–û');
        console.log('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('   - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        console.log('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —Ñ—É–Ω–∫—Ü–∏–∏');
        console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å Telegram API');
        console.log('   - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (Node.js, Python)');
    }
    
    console.log(`\nüìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}`);
    console.log('\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(error => {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
});