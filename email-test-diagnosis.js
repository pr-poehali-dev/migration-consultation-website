#!/usr/bin/env node

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ backend —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
 * –§–∞–π–ª: email-test-diagnosis.js
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node email-test-diagnosis.js
 */

const https = require('https');
const { URL } = require('url');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
const config = {
  url: 'https://functions.poehali.dev/de88ac79-adac-4fb5-a2a7-30f8061abbd7',
  testData: {
    name: '–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤',
    phone: '+7 912 345 67 89',
    messenger: 'telegram',
    service: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –†–í–ü',
    message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
    urgentConsultation: false
  },
  timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥
};

console.log('üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê BACKEND –§–£–ù–ö–¶–ò–ò –û–¢–ü–†–ê–í–ö–ò EMAIL');
console.log('=' .repeat(60));
console.log(`üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString('ru-RU')}`);
console.log(`üîó Endpoint: ${config.url}`);
console.log(`‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç: ${config.timeout}ms`);
console.log(`üèóÔ∏è  Node.js: ${process.version}`);
console.log('');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(url, data, timeout = 10000) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const postData = JSON.stringify(data);
    
    const options = {
      hostname: urlObj.hostname,
      path: urlObj.pathname,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData),
        'User-Agent': 'Email-Test-Client/1.0'
      },
      timeout: timeout
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:', JSON.stringify(options.headers, null, 2));
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ:', JSON.stringify(data, null, 2));
    console.log('');

    const req = https.request(options, (res) => {
      console.log(`‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
      console.log(`üìä HTTP Status: ${res.statusCode} ${res.statusMessage}`);
      console.log(`üìã Response Headers:`);
      Object.entries(res.headers).forEach(([key, value]) => {
        console.log(`    ${key}: ${value}`);
      });
      console.log('');

      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö: ${chunk.length} –±–∞–π—Ç`);
      });

      res.on('end', () => {
        console.log(`üèÅ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é: ${responseData.length} –±–∞–π—Ç`);
        console.log('üì® –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', responseData);
        console.log('');

        try {
          const jsonResponse = JSON.parse(responseData);
          console.log('‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω');
          console.log('üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:');
          console.log(JSON.stringify(jsonResponse, null, 2));
          
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: jsonResponse,
            rawData: responseData
          });
        } catch (parseError) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError.message);
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: null,
            rawData: responseData,
            parseError: parseError.message
          });
        }
      });
    });

    req.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
      console.error('üîç –¢–∏–ø –æ—à–∏–±–∫–∏:', error.code);
      console.error('üìã –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      reject(error);
    });

    req.on('timeout', () => {
      console.error(`‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (${timeout}ms)`);
      req.destroy();
      reject(new Error(`Request timeout after ${timeout}ms`));
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    req.write(postData);
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function analyzeResults(result) {
  console.log('üîç –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í');
  console.log('-' .repeat(30));
  
  if (result.statusCode >= 200 && result.statusCode < 300) {
    console.log('‚úÖ HTTP —Å—Ç–∞—Ç—É—Å: –£–°–ü–ï–•');
  } else if (result.statusCode >= 400 && result.statusCode < 500) {
    console.log('‚ö†Ô∏è  HTTP —Å—Ç–∞—Ç—É—Å: –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –û–®–ò–ë–ö–ê');
  } else if (result.statusCode >= 500) {
    console.log('‚ùå HTTP —Å—Ç–∞—Ç—É—Å: –°–ï–†–í–ï–†–ù–ê–Ø –û–®–ò–ë–ö–ê');
  } else {
    console.log('‚ùì HTTP —Å—Ç–∞—Ç—É—Å: –ù–ï–û–ñ–ò–î–ê–ù–ù–´–ô');
  }

  // –ê–Ω–∞–ª–∏–∑ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  const corsHeader = result.headers['access-control-allow-origin'];
  if (corsHeader) {
    console.log('‚úÖ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏: –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    console.log(`   Access-Control-Allow-Origin: ${corsHeader}`);
  } else {
    console.log('‚ùå CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
  }

  // –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  if (result.data) {
    if (result.data.success) {
      console.log('‚úÖ Backend –æ—Ç–≤–µ—Ç: –£–°–ü–ï–•');
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${result.data.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    } else if (result.data.error) {
      console.log('‚ùå Backend –æ—Ç–≤–µ—Ç: –û–®–ò–ë–ö–ê');
      console.log(`   –û—à–∏–±–∫–∞: ${result.data.error}`);
    } else {
      console.log('‚ùì Backend –æ—Ç–≤–µ—Ç: –ù–ï–û–ñ–ò–î–ê–ù–ù–´–ô –§–û–†–ú–ê–¢');
    }
  } else {
    console.log('‚ùå Backend –æ—Ç–≤–µ—Ç: –ù–ï –£–î–ê–õ–û–°–¨ –†–ê–°–ü–ê–†–°–ò–¢–¨');
    if (result.parseError) {
      console.log(`   –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${result.parseError}`);
    }
  }

  console.log('');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runDiagnostics() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...');
    console.log('');

    const startTime = Date.now();
    const result = await makeRequest(config.url, config.testData, config.timeout);
    const endTime = Date.now();
    const duration = endTime - startTime;

    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
    console.log('');

    analyzeResults(result);

    // –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üìã –ò–¢–û–ì–û–í–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï');
    console.log('=' .repeat(30));
    
    if (result.statusCode === 200 && result.data && result.data.success) {
      console.log('üéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ô–î–ï–ù–ê –£–°–ü–ï–®–ù–û!');
      console.log('   ‚úÖ Backend —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('   ‚úÖ Email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } else {
      console.log('üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!');
      console.log('   ‚ùå Backend —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('   ‚ùå Email –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é
      console.log('');
      console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      if (result.statusCode === 500) {
        console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)');
        console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ backend —Ñ—É–Ω–∫—Ü–∏–∏');
      } else if (result.statusCode === 400) {
        console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
        console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
      } else if (result.statusCode >= 400) {
        console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL endpoint —Ñ—É–Ω–∫—Ü–∏–∏');
        console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend —Å–µ—Ä–≤–∏—Å–∞');
      }
    }

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò');
    console.error('   –û—à–∏–±–∫–∞:', error.message);
    console.error('   –¢–∏–ø:', error.code || 'UNKNOWN');
    
    console.log('');
    console.log('üí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
    console.log('   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    console.log('   ‚Ä¢ Backend —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL endpoint');
    console.log('   ‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ firewall/proxy');
  }

  console.log('');
  console.log('üîö –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  console.log(`üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}`);
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if (require.main === module) {
  runDiagnostics().catch(console.error);
}

module.exports = { runDiagnostics, makeRequest, analyzeResults };